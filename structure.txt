# MIPS 32 VERILOG SIMULATION

cpu:
	reg clock: this is the system clock
	program_counter: This is a simple module that is always set by pc_mux:
		input clock: system clock
		input [31:0] nxt_inst: next instruction address
		output [31:0] cur_pc: next instruction address goes to inst_mem
	pc_mux: 2:1 Mux for program_counter input:
		input pc_src: which input to use.  From EX/MEM register or branch predictor
		input [31:0] jmp_addr: a new PC value from the EX/MEM register
		input [31:0] nxt_pc: sequential next PC from pc_adder
		output [31:0] nxt_inst: actual next instruction address to program_counter
	pc_adder: Increments to next sequential instruction address:
		input [31:0] cur_pc: current instruction address
		output [31:0] nxt_pc: next sequential instruction address to pc_mux and if_id
	inst_mem: Instruction Read unit and register:
		input [31:0] inst_reg: address to read from, from nxt_inst.  this is probably an index of raw_mem array.
		output [31:0] inst_out: instruction output to IF/ID state register
		[31:0] raw_mem [SIZE-1:0]: Instruction memory from a text file.  This should be an array of 32 bit regs
	if_id: IF/ID state register
		input [31:0] nxt_pc: next sequential instruction address
		input [31:0] inst_in: Instruction input from inst_mem.inst_out
		output [31:0] inst_out: Forward inst_in to id_ex, control_unit
		output [25:21] rs: sliced from inst_in, sent to rfile.r_addr1, id_ex
		output [20:16] rt: sliced from inst_in, sent to rfile.r_addr2, id_ex
		output [15:0] imm: sliced from inst_in, sent to sign_extender
		output [15:11] rd: sliced from inst_in, sent to id_ex
	sign_extender: sign extend immediate value.
		input [15:0] imm_in: from if_id state register
		output [31:0] imm_out: sign extended imm_in to 32 bits.  send to id_ex.
	rfile: Register File
		input reg_write: write control signal
		input [4:0] r_addr1: read address of rs. from if_id
		input [4:0] r_addr2: read address of rt. from if_id
		input [4:0] w_addr: write address of rd. from mem_wb
		input [31:0] w_data: write data.  From write_mux
		output [31:0] r_data1: rs data read from regs[r_addr1].  sent to id_ex
		output [31:0] r_data2: data read from regs[r_addr2].  sent to id_ex
		[31:0] regs [31:0]: an array of 32, 32-bit registers.
	ctrl: Main control unit
		inputs TODO
		ouputs TODO
	hazard_unit: TODO
	id_ex: ID/EX state register
		inputs TODO ctrl signals
		input [31:0] r_data1: rs data read from regs[r_addr1]
		input [31:0] r_data2: rt data read from regs[r_addr2]
		input [5:0] rs: received from if_id
		input [5:0] rt: received from if_id
		input [5:0] rd: received from if_id
		input [31:0] imm: sign extended immediate value
		output [31:0] r_data1_out: r_data_1 passthrough. sent to alu_mux_a
		output [31:0] r_data2_out: r_data_2 passthrough.  to alu_mux_b
		output [31:0] imm_out: imm passthrough.  to alu_mux_imm, shift_unit
		output [5:0] rs_out: sent to fwd_unit
		output [5:0] rt_out: sent to fwd_unit, ex_mux
		output [5:0] rd_out: sent to ex_mux
	alu_mux_a:
	alu_mux_b:
	alu_mux_imm:
	alu: The main ALU
		input [31:0] op_1: a 32 bit operand.  from alu_mux_1
		input [31:0] op_2: a 32 bit operand.  from alu_mux_imm
		input [3:0] alu_op: The 4-bit ALU op code.  See  OpCode table.
		ouput [31:0] result: a 32 bit result of operation.  to ex_mem
	ex_mux: 
	fwd_unit:
	shift_unit:
	jmp_adder:
	ex_mem:
	branch_unit:
	data_mem:
	mem_wb:
	wb_mux:

		
